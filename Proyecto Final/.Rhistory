logit(pi[i])<-beta[1]+beta[2]*x[i]
ld[i] <- (-beta[1])/beta[2]
}
#Priors
for (j in 1:2){
beta[j] ~ dnorm(0,0.0001)
}
#si quisieramos sacar la R2 necesitamos ademas incluir en el modelo
for (i in 1:n) {yf[i] ~ dbin(pi[i],ne[i])}
}
'
cat(mod_bin_logit.txt, file = 'mod_bin_logit.bugs')
#definimos puntos iniciales
inits <- function(){list(beta=rep(0,2),ld=rep(0,n),yf=rep(0,n))}
#seleccionamos los parametros a conocer
parameters<-c("beta","ld","yf")
#JAGS
mod_bin_logit.sim<-jags(data,inits,parameters,model.file="mod_bin_logit.bugs",n.iter=50000,n.chains=1,n.burnin=500,n.thin=5)
#-Model
mod_bin_logit.txt <-
'
model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dbin(pi[i],ne[i])
logit(pi[i])<-beta[1]+beta[2]*x[i]
}
#Priors
for (j in 1:2){
beta[j] ~ dnorm(0,0.0001)
}
#obtenemos la dosis letal 50
for (i in 1:n) {ld[i] <- (-beta[1])/beta[2]}
#si quisieramos sacar la R2 necesitamos ademas incluir en el modelo
for (i in 1:n) {yf[i] ~ dbin(pi[i],ne[i])}
}
'
cat(mod_bin_logit.txt, file = 'mod_bin_logit.bugs')
#definimos puntos iniciales
inits <- function(){list(beta=rep(0,2),ld=rep(0,n),yf=rep(0,n))}
#seleccionamos los parametros a conocer
parameters<-c("beta","ld","yf")
#JAGS
mod_bin_logit.sim<-jags(data,inits,parameters,model.file="mod_bin_logit.bugs",n.iter=50000,n.chains=1,n.burnin=500,n.thin=5)
data<-list("n"=n,"ne"=clinic$No.Animales,"y"=clinic$No.Muertes,"x"=clinic$LogDose)
#-Model
mod_bin_logit.txt <-
'
model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dbin(pi[i],ne[i])
logit(pi[i])<-beta[1]+beta[2]*x[i]
}
#Priors
for (j in 1:2){
beta[j] ~ dnorm(0,0.0001)
}
#si quisieramos sacar la R2 necesitamos ademas incluir en el modelo
for (i in 1:n) {yf[i] ~ dbin(pi[i],ne[i])}
}
'
cat(mod_bin_logit.txt, file = 'mod_bin_logit.bugs')
#definimos puntos iniciales
inits <- function(){list(beta=rep(0,2),yf=rep(0,n))}
#seleccionamos los parametros a conocer
parameters<-c("beta","yf")
#JAGS
mod_bin_logit.sim<-jags(data,inits,parameters,model.file="mod_bin_logit.bugs",n.iter=50000,n.chains=1,n.burnin=500,n.thin=5)
model.sim <- mod_bin_logit.sim
model.sim
library(R2jags)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(corrplot)
#definimos semilla
set.seed(114041)
# new chum cmd+shift+i
# funcion para generar graficas
analisis_estimacion <- function(z,tittle){
g1 <- ggplot(data.frame(est=1:length(z),z=z),aes(x=est,y=z))+
geom_line() +
theme(panel.background=element_rect(fill='#C2D1E0'),
strip.background=element_rect(fill="#2c3e50"),
panel.border = element_rect(colour = "#2c3e50", fill=NA, size=1),
axis.text.y=element_text(size=14,face="bold"),
axis.text.x=element_text(size=14,face="bold"),
legend.title=element_blank())
g2 <- ggplot(data.frame(est=1:length(z),z=z),aes(x=est,
y=cumsum(z)/(1:length(z))))+
geom_line() +
theme(panel.background=element_rect(fill='#C2D1E0'),
strip.background=element_rect(fill="#2c3e50"),
panel.border = element_rect(colour = "#2c3e50", fill=NA, size=1),
axis.text.y=element_text(size=14,face="bold"),
axis.text.x=element_text(size=14,face="bold"),
legend.title=element_blank())
g3 <- ggplot(data.frame(z),aes(x=z))+
geom_histogram(aes(y=..density..),colour = 'black', fill = 'white') +
geom_density() +
geom_vline(xintercept = c(quantile(z,0.025),quantile(z,0.975),mean(z),0),size = 1.2,color = c('black','black','grey48','grey38')) +
theme(panel.background=element_rect(fill='#C2D1E0'),
strip.background=element_rect(fill="#2c3e50"),
panel.border = element_rect(colour = "#2c3e50", fill=NA, size=1),
axis.text.y=element_text(size=14,face="bold"),
axis.text.x=element_text(size=14,face="bold"),
legend.title=element_blank())
lag <- (1:round(+10*log(length(z),10)))-1
bacf <- acf(z, plot = FALSE)
bacfdf <- data.frame(lag=bacf$lag,acf=bacf$acf)
ciline <- qnorm((1 - 0.95)/2)/sqrt(length(z))
g4 <- ggplot(data = bacfdf, mapping = aes(x = lag, y = acf)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
geom_hline(yintercept = -ciline, color = "blue",size = 0.2) +
geom_hline(yintercept = ciline, color = "blue", size = 0.2) +
theme(panel.background=element_rect(fill='#C2D1E0'),
strip.background=element_rect(fill="#2c3e50"),
panel.border = element_rect(colour = "#2c3e50", fill=NA, size=1),
axis.text.y=element_text(size=14,face="bold"),
axis.text.x=element_text(size=14,face="bold"),
legend.title=element_blank(),
title=element_text(size=20))
grid.arrange(g1,g2,g3,g4,ncol=2,nrow=2,top=tittle)
}
#la probabilidad de ser negativa es
prob <- function(x){
a  <- sum(x<0)/length(x)
min(a,1-a)
}
clinic<-read.table("http://allman.rhon.itam.mx/~lnieto/index_archivos/Bioassay.txt",header=TRUE)
datos <- clinic
n<-nrow(clinic)
library("knitr")
kable(clinic)
# Insumos Resultados
# base de datos para los parametros
out<-model.sim$BUGSoutput$sims.list
b0 <- out$beta[,1]
b1 <- out$beta[,2]
deviance <- out$deviance[,1]
yf <- out$yf[,1]
# intervalos prediccion para y'is
out.sum<-model.sim$BUGSoutput$summary
out.yf <-out.sum[grep("yf",rownames(out.sum)),]
int_pred <- as.data.frame(cbind(datos,out.yf))
# residuales
int_pred$res <- (int_pred$No.Muertes-int_pred$mean)
int_pred <- int_pred %>%
arrange(No.Muertes) %>%
mutate(ind=1:nrow(int_pred))
int_pred_com <- int_pred %>%
select(LogDose,No.Animales,No.Muertes,mean)%>%
rename(pred_mod1=mean)
# Tablas Resultados
# diagnostico de los parametros
analisis_estimacion(b0,"alpha")
analisis_estimacion(b1,"beta")
significancia <- matrix(c(mean(out$beta[,1]),
mean(out$beta[,2]),
prob(out$beta[,1]),
prob(out$beta[,2])),ncol=2,byrow=FALSE)
rownames(significancia) <- c("alpha","beta")
colnames(significancia) <- c("mean(beta)","p-value")
significancia <- as.table(significancia)
kable(significancia)
b0
b1
Ld_50 <- -b0/b1
Ld_50
head(Ld_50)
mean(Ld_50)
kable(significancia)
as.data.frame(mean(Ld_50))
kable(as.data.frame(mean(Ld_50)))
as.data.frame(mean(Ld_50))
cbind(as.data.frame(mean(Ld_50)),as.data.frame(exp(mean(Ld_50))))
histogram(yf)
histogram(yf>0)
head(yf)
b0_hat <- mean(b0)
b1_hat <- mean(b1)
log_momios1 <- b0_hat+(b1_hat*-0.86)
log_momios2 <- b0_hat+(b1_hat*-0.30)
log_momios1
log_momios2
theta1 <- exp(log_momios1)/(1+exp(log_momios1))
theta1
theta1 <- exp(log_momios1)/(1+exp(log_momios1))
theta2 <- exp(log_momios2)/(1+exp(log_momios2))
theta2
theta2/theta1
theta2-theta1
n6 = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n6, s, b)
df
efecto <- data.frame(x_i,log_momio,theta)
x_i <- c(-0.86,-0.30)
log_momio <- c(log_momios1,log_momios2)
theta <- c(theta1,theta2)
efecto <- data.frame(x_i,log_momio,theta)
efect
efecto
x_i <- c(-0.86,-0.30)
log_momio <- c(log_momios1,log_momios2)
theta <- c(theta1,theta2)
cambio_porcentual <- c(porc,porc)
efecto <- data.frame(x_i,log_momio,theta,cambio_porcentual)
cambio_porcentual <- c(porc,porc)
porc <- theta2/theta1
x_i <- c(-0.86,-0.30)
log_momio <- c(log_momios1,log_momios2)
theta <- c(theta1,theta2)
cambio_porcentual <- c(porc,porc)
efecto <- data.frame(x_i,log_momio,theta,cambio_porcentual)
efecto
kable(efecto)
R2_mod1 <- cor(int_pred$No.Muertes,int_pred$mean)^2
R2_mod1
ggplot(int_pred)+
geom_point(aes(No.Muertes,mean))+
geom_smooth(method="lm",aes(No.Muertes,mean))
ajuste <- data.frame(modelo,R_2,DIC)
modelo <- c("liga logit con no informativas")
R_2 <- c(R2_mod1)
DIC <- c(liga1_dic)
ajuste <- data.frame(modelo,R_2,DIC)
R2_mod1 <- cor(int_pred$No.Muertes,int_pred$mean)^2
R2_mod1
#DIC
out.dic<-model.sim$BUGSoutput$DIC
out.dic
liga1_dic<-model.sim$BUGSoutput$DIC
modelo <- c("liga logit con no informativas")
R_2 <- c(R2_mod1)
DIC <- c(liga1_dic)
ajuste <- data.frame(modelo,R_2,DIC)
ajuste
modelo <- c("liga logit con no informativas")
LD_50 <- c(mean(Ld_50))
LD_50_real <- c(exp(mean(Ld_50)))
Lethal_dosis <- data.frame(modelo,LD_50,LD_50_real)
kable(Lethal_dosis)
data<-list("n"=n,"ne"=clinic$No.Animales,"y"=clinic$No.Muertes,"x"=clinic$LogDose)
#-Model
mod_bin_logit2.txt <-
'
model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dbin(pi[i],ne[i])
logit(pi[i])<-beta[1]+beta[2]*x[i]
}
#Priors
beta[1] ~ dnorm(-17.31,0.0009490187)
beta[2] ~ dnorm(2.57,0.04302926)
#si quisieramos sacar la R2 necesitamos ademas incluir en el modelo
for (i in 1:n) {yf[i] ~ dbin(pi[i],ne[i])}
}
'
cat(mod_bin_logit2.txt, file = 'mod_bin_logit2.bugs')
#definimos puntos iniciales
inits <- function(){list(beta=rep(0,2),yf=rep(0,n))}
#seleccionamos los parametros a conocer
parameters<-c("beta","yf")
#JAGS
mod_bin_logit2.sim<-jags(data,inits,parameters,model.file="mod_bin_logit2.bugs",
n.iter=50000,n.chains=1,n.burnin=500,n.thin=5)
model.sim <- mod_bin_logit2.sim
model.sim
# Insumos Resultados
# base de datos para los parametros
out<-model.sim$BUGSoutput$sims.list
b0 <- out$beta[,1]
b1 <- out$beta[,2]
deviance <- out$deviance[,1]
yf <- out$yf[,1]
# intervalos prediccion para y'is
out.sum<-model.sim$BUGSoutput$summary
out.yf <-out.sum[grep("yf",rownames(out.sum)),]
int_pred <- as.data.frame(cbind(datos,out.yf))
# residuales
int_pred$res <- (int_pred$No.Muertes-int_pred$mean)
int_pred <- int_pred %>%
arrange(No.Muertes) %>%
mutate(ind=1:nrow(int_pred))
int_pred_com2 <- int_pred %>%
select(mean) %>%
rename(pred_mod2=mean)
int_pred_com2
int_pred_com_f <- cbind(int_pred_com,int_pred_com2)
int_pred_com_f
analisis_estimacion(b0,"alpha")
analisis_estimacion(b1,"beta")
significancia <- matrix(c(mean(out$beta[,1]),
mean(out$beta[,2]),
prob(out$beta[,1]),
prob(out$beta[,2])),ncol=2,byrow=FALSE)
rownames(significancia) <- c("alpha","beta")
colnames(significancia) <- c("mean(beta)","p-value")
significancia <- as.table(significancia)
kable(significancia)
Ld_50 <- -b0/b1
modelo <- c("liga logit con inciales informativas")
LD_50 <- c(mean(Ld_50))
LD_50_real <- c(exp(mean(Ld_50)))
Lethal_dosis <- rbind(Lethal_dosis,data.frame(modelo,LD_50,LD_50_real))
kable(Lethal_dosis)
dbin(5,.3)
dbinom(5,.3)
rbinom(5, 4, .3)
ggplot(int_pred_com_f)+
geom_point(aes(LogDose,No.Muertes,colour="Observado"),size=3)+
geom_line(aes(LogDose,No.Muertes),colour="gray")+
geom_point(aes(LogDose,pred_mod1,colour="Prediccion_1"),alpha=.7,size=3)+
geom_line(aes(LogDose,pred_mod1),colour="midnightblue")+
geom_point(aes(LogDose,pred_mod2,colour="Prediccion_2"),alpha=.7,size=3)+
geom_line(aes(LogDose,pred_mod2),colour="green")+
scale_color_manual(values=c("Observado"="gray","Prediccion_1"="midnightblue","Prediccion_2"="green"))+
theme(legend.title=element_blank())
ggplot(int_pred_com_f)+
geom_histogram(aes(LogDose,No.Muertes,colour="Observado"))
sampling<-function(base,T){
library(mlr)
library(kernlab)
library(ROCR)
#library(pROC)
################################
#Argumentos para la funcion MLR
learner = makeLearner("classif.ksvm",predict.type="prob")
# SE DEFINE EL CONJUNTO DE VALORES PARA FORMAR EL GRID
param= makeParamSet(
makeDiscreteParam("C", values = c(1)),
makeDiscreteParam("sigma", values = c(.1))
)
ctrl = makeTuneControlGrid()
inner = makeResampleDesc("Holdout")       #Holdout validation
outer = makeResampleDesc("CV", iters = 3) #K-fold CrossValidation
################################
malos<-subset(base,inc==1)   #Subset con clientes con incumplimiento igual a 1
num_malos<-nrow(malos)
buenos<-subset(base,inc==0)  #Subset con clientes con incumplimiento igual a 0
#En estos vectores vamos a guardar los mejores AUC por VC, los mejores parametros C
#y sigma en cada iteracion y el AUC con muestra de prueba
aucs<-rep(0,T)
Cs<-rep(0,T)
sigmas<-rep(0,T)
aucs_train<-rep(0,T)
ci_lower<-rep(0,T)
ci_upper<-rep(0,T)
nsv<-rep(0,T) #Numero de SV
tprs<-rep(0,T)
accs<-rep(0,T)
#Loop:
# Hacemos T iteraciones. COnservamos los malos
for (i in 1:T){
library(mlr)
set.seed(i)
ind_samp<-sample(1:nrow(buenos), size=floor(num_malos/4), replace = FALSE, prob = NULL)
ind_malos<-sample(1:nrow(malos),size=floor(num_malos/4),replace=FALSE,prob=NULL)
samp<-buenos[ind_samp,]
samp_malos<-malos[ind_malos,]
samp_complemento<-buenos[-ind_samp,]
samp_malos_complemento<-malos[-ind_malos,]
base_complemento<-rbind(samp_complemento,samp_malos_complemento)
basesamp<-rbind(samp,samp_malos)
sub.base<-basesamp
sub.base$inc<-as.factor(sub.base$inc)
task<-makeClassifTask(data=sub.base, target="inc")
lrnr_task = makeTuneWrapper(learner, resampling = outer, par.set = param,
control = ctrl, measure=list(auc,tpr,fpr,acc))
set.seed(i)
mod = train(lrnr_task, task)
aucs[i]<-mod$learner.model$opt.result$y[1]
tprs[i]<-mod$learner.model$opt.result$y[2]
accs[i]<-mod$learner.model$opt.result$y[4]
Cs[i]<-mod$learner.model$opt.result$x[[1]]
sigmas[i]<-mod$learner.model$opt.result$x[[2]]
model<-ksvm(inc~., data=sub.base, type = "C-svc", C=mod$learner.model$opt.result$x[[1]],
kpar=list(sigma = mod$learner.model$opt.result$x[[2]]),prob.model=T)
nsv[i]<-model@nSV
set.seed(i)
preds_train<-predict(model,newdata=base_complemento,type="probabilities")
preds_train<-preds_train[,2]
base_complemento$preds<-preds_train
library(pROC)
rocobj<-plot.roc(base_complemento$inc, base_complemento$preds,percent=TRUE,
ci=TRUE,print.auc=TRUE)
aucs_train[i]<-rocobj$auc
detach("package:pROC",unload=T)
detach("package:mlr",unload=T)
}
#Guardamos los vectores de los resultados en una lista y retornamos ese objeto
list_result<-list(aucs,Cs,sigmas,aucs_train,tprs,accs,nsv)
return(list_result)
}
setwd("~/Desktop/Sponda")
clientes_bm<-desarrollo_seg4_train[1:43280,]}
clientes_bm<-desarrollo_seg4_train[1:43280,]
desarrollo_seg4_train <- read.csv("~/Desktop/Sponda/desarrollo_seg4_train.csv")
View(desarrollo_seg4_train)
desarrollo_seg4_test <- read.csv("~/Desktop/Sponda/desarrollo_seg4_test.csv")
View(desarrollo_seg4_test)
clientes_bm<-desarrollo_seg4_train[1:43280,]
clientes_nobm<-desarrollo_seg4_train[43281:87228,]
nrow(clientes_nobm_malos)/nrow(clientes_nobm)
clientes_nobm_malos<-subset(clientes_nobm,Y2==1)
nrow(clientes_nobm_malos)/nrow(clientes_nobm)
seg4_new<-rbind(clientes_bm,clientes_nobm_malos)
seg4_llaves_new<-seg4_new$llavepu
seg4_new$llavepu<-NULL
seg4_new$train<-NULL
seg4_new$MODELO<-NULL
seg4_new$cosecha<-NULL
seg4_new$inc<-seg4_new$Y2
seg4_new$Y2<-NULL
result_new<-sampling(seg4_new,125)
df<-as.data.frame(cbind(result_new[[1]],result_new[[2]],result_new[[3]],
result_new[[4]],result_new[[5]],result_new[[6]],
result_new[[7]]))
mes(df)<-c("AUC_CV","C","sigma","AUC_Test","TPR","ACC","Nsv")
write.csv(df,"result_seg4.csv")
names(df)<-c("AUC_CV","C","sigma","AUC_Test","TPR","ACC","Nsv")
write.csv(df,"result_seg4.csv")
seg4_new$preds<-NULL
seg4_new$llavepu<-seg4_llaves_new
bestiter_s4<-102
set.seed(bestiter_s4)
base<-seg4_new
malos<-subset(base,inc==1)   #Subset con clientes con incumplimiento igual a 1
num_malos<-nrow(malos)
buenos<-subset(base,inc==0)
ind_samp<-sample(1:nrow(buenos), size=floor(num_malos/4), replace = FALSE, prob = NULL)
ind_malos<-sample(1:nrow(malos),size=floor(num_malos/4),replace=FALSE,prob=NULL)
samp<-buenos[ind_samp,]
samp_malos<-malos[ind_malos,]
samp_complemento<-buenos[-ind_samp,]
samp_malos_complemento<-malos[-ind_malos,]
base_complemento<-rbind(samp_complemento,samp_malos_complemento)
basesamp<-rbind(samp,samp_malos)
sub.base<-basesamp
sub.base$inc<-as.factor(sub.base$inc)
seg4_llaves_train<-sub.base$llavepu
sub.base$llavepu<-NULL
model<-ksvm(inc~., data=sub.base, type = "C-svc", C=df[bestiter_s4,2],kpar=list(sigma = df[bestiter_s4,3]),prob.model=T)
preds_train<-predict(model,newdata=sub.base,type="probabilities")
preds_train<-preds_train[,2]
sub.base$preds<-preds_train
library(pROC)
rocobj<-plot.roc(sub.base$inc, sub.base$preds,percent=TRUE, ci=TRUE,print.auc=TRUE)
rocobj$auc
#91.43
seg4test<-desarrollo_seg4_test
seg4test$inc<-seg4test$Y2
seg4test$Y2<-NULL
seg4test<-na.omit(seg4test)
seg4_llaves_test<-seg4test$llavepu
seg4test$llavepu<-NULL
seg4test$cosecha<-NULL
seg4test$MODELO<-NULL
seg4test$train<-NULL
seg4test$llavepu<-seg4_llaves_test
#68740 observaciones
seg4test_full<-rbind(base_complemento,seg4test)
preds_test<-predict(model,newdata=seg4test_full,type="probabilities")
preds_test<-preds_test[,2]
seg4test_full$preds<-preds_test
library(pROC)
rocobj<-plot.roc(seg4test_full$inc, seg4test_full$preds,percent=TRUE, ci=TRUE,print.auc=TRUE)
rocobj$auc
setwd("~/Desktop/Sponda")
seg4_train<-desarrollo_seg4_train
seg4_train$llavepu<-NULL
seg4_train$cosecha<-NULL
seg4_train$MODELO<-NULL
seg4_train$train<-NULL
seg4_reglog <- glm(Y2 ~ .,family = binomial, data = seg4_train)
# INFORMACION SOBRE EL MODELO (BETAS, P-VALUES, ETC.)
summary(seg4_reglog)
#######################
# BASE DE ENTRENAMIENTO
#######################
pd_reglog<-predict(seg4_reglog,newdata=seg4_train,type="response")
seg4_train$pd_reglog<-pd_reglog
roccurve<-plot.roc(seg4_train$Y2, seg4_train$pd_reglog,
percent=TRUE, ci=TRUE,print.auc=TRUE)
roccurve$auc
#######################
# BASE DE PRUEBA
#######################
seg4_test<-desarrollo_seg4_test
seg4_test$llavepu<-NULL
seg4_test$cosecha<-NULL
seg4_test$MODELO<-NULL
seg4_test$train<-NULL
pd_reglog<-predict(seg4_reglog,newdata=seg4_test,type="response")
seg4_test$pd_reglog<-pd_reglog
roccurve<-plot.roc(seg4_test$Y2, seg4_test$pd_reglog,
percent=TRUE, ci=TRUE,print.auc=TRUE)
roccurve$auc
#78.61
save.image("~/Desktop/Sponda/global_pf_sponda.RData")
#roccurve$auc
rocobj<-plot.roc(seg4test_full$inc, seg4test_full$preds,percent=TRUE, ci=TRUE,print.auc=TRUE)
nrow(desarrollo_seg4_train)+nrow(desarrollo_seg4_test)
ncol(desarrollo_seg4_train)
